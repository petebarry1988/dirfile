.\" getdata.3.  The getdata man page.
.TH getdata 3 "11 August 2008" "Version 0.2.0" "GETDATA"
.SH NAME
getdata \(em retreive data from a dirfile database
.SH SYNOPSIS
.B #include <getdata.h>
.HP
.nh
.ad l
.BI "off_t getdata(DIRFILE *" dirfile ", const char *" field_code ", off_t"
.IB first_frame ", off_t " first_sample ", off_t " num_frames ", off_t"
.IB num_samples ", gd_type_t " return_type ", void *" data_out );
.hy
.ad n
.SH DESCRIPTION
The
.BR getdata ()
function queries a dirfile(5) database specified by
.I dirfile
for the field
.IR field_code .
It fetches
.I num_frames
frames plus
.I num_samples
samples from this field, starting 
.I first_sample
samples past frame
.IR first_frame . 
The data is converted to the data type specified by
.IR return_type ,
and stored in the user-supplied buffer
.IR data_out .

The 
.I dirfile
parameter must point to a valid DIRFILE object previously created by a call to
.BR dirfile_open (3).

The first sample returned will be
.RS
.IR first_frame " * " samples_per_frame " + " first_sample
.RE
as measured from the start of the dirfile, where
.I samples_per_frame
is the number of samples per frame as returned by
.BR get_samples_per_frame (3).
The number of samples fetched is, similarly
.RS
.IR num_frames " * " samples_per_frame " + " num_samples .
.RE
Although calling
.BR getdata ()
using both samples and frames is possible, the function is typically called
with either
.IR num_samples " and " first_sample ,
or
.IR num_frames " and " first_frames ,
equal to zero.

The 
.I return_type
parameter should be one of the following symbols, which indicates the desired
return type of the data:
.RS
.TP 11
.I GD_UINT8
unsigned 8-bit integer
.TP
.I GD_INT8
signed 8-bit integer
.TP
.I GD_UINT16
unsigned 16-bit integer
.TP
.I GD_INT16
signed 16-bit integer
.TP
.I GD_UINT32
unsigned 32-bit integer
.TP
.I GD_INT32
signed 32-bit integer
.TP
.I GD_UINT64
unsigned 64-bit integer
.TP
.I GD_INT64
signed 64-bit integer
.TP
.IR GD_FLOAT32 \~or\~ GD_FLOAT
IEEE-754 standard 32-bit single precision floating point number
.TP
.IR GD_FLOAT64 \~or\~ GD_DOUBLE
IEEE-754 standard 64-bit double precision floating point number
.TP
.I GD_NULL
the null type: the database is queried as usual, but no data is returned.
In this case,
.I data_out
is ignored and may be NULL.
.RE

The return type of the data need not be the same as the type of the data stored
in the database.  Type conversion will be performed as necessary to return the
desired type.  The parameter
.I data_out
must point to a valid memory location of sufficient size to hold all data
requested.
.SH RETURN VALUE
In all cases,
.BR getdata ()
returns the number of samples successfully read from the database.  If the
end-of-field is encountered before the requested number of samples have been
read, a short count will result.  The library does not considered this an error.

If an error has occured,
.IR dirfile -> error
will be set to a non-zero value.  Possible error values are:
.TP 8
.B GD_E_ALLOC
The library was unable to allocate memory.
.TP
.B GD_E_BAD_CODE
The field specified by
.I field_code
was not found in the database.
.TP
.B GD_E_BAD_DIRFILE
The supplied dirfile was invalid.
.TP
.B GE_E_BAD_RETURN_TYPE
The value of
.I return_type
was not one of the recognised values.
.TP
.B GD_E_INTERNAL_ERROR
An internal error occurred in the library while trying to perform the task.
This indicates a bug in the library.  Please report the incident to the
maintainer.
.TP
.B GD_E_OPEN_RAWFIELD
An error occurred while trying to open a file on disk containing a raw field.
.TP
.B GD_E_OPEN_LINFILE
An error occurred while trying to read a LINTERP table from disk.
.TP
.B GD_E_RECURSE_LEVEL
Too many levels of recursion were encountered while trying to resolve
.IR field_code .
This usually indicates a circular dependency in field specification in the
dirfile.
.RE
.P
A descriptive error string for the last error encountered can be obtained from
a call to
.BR getdata_error_string (3).
.SH SEE ALSO
.BR dirfile (5),
.BR dirfile_open (3),
.BR getdata_error_string (3),
.BR get_samples_per_frame (3)
