.\" dirfile_madd_bit.3.  The dirfile_madd_bit man page.
.\"
.\" (C) 2008, 2009 D. V. Wiebe
.\"
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\"
.\" This file is part of the GetData project.
.\"
.\" Permission is granted to copy, distribute and/or modify this document
.\" under the terms of the GNU Free Documentation License, Version 1.2 or
.\" any later version published by the Free Software Foundation; with no
.\" Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
.\" Texts.  A copy of the license is included in the `COPYING.DOC' file
.\" as part of this distribution.
.\"
.TH dirfile_madd_bit 3 "16 October 2009" "Version 0.6.0" "GETDATA"
.SH NAME
dirfile_madd_bit, dirfile_madd_clincom, dirfile_madd_const,
dirfile_madd_cpolynom, dirfile_madd_lincom, dirfile_madd_linterp,
dirfile_madd_multiply, dirfile_madd_phase, dirifle_madd_polynom,
dirfile_madd_bit, dirfile_madd_string \(em add a field
to a dirfile
.SH SYNOPSIS
.B #include <getdata.h>
.HP
.nh
.ad l
.BI "int dirfile_madd_bit(DIRFILE *" dirfile ,
.BI "const char *" parent ", const char *" field_name ,
.BI "const char *" in_field ", int " bitnum ", int " numbits );
.HP
.BI "int dirfile_madd_clincom(DIRFILE *" dirfile ", const char *" parent ,
.BI "const char *" field_name ", int " n_fields ", const char **" in_fields ,
.BI "const double complex *" cm ", const double complex *" cb );
.HP
.BI "int dirfile_madd_const(DIRFILE *" dirfile ,
.BI "const char *" parent ", const char *" field_name ,
.BI "gd_type_t " const_type ", gd_type_t " data_type ", void *" value );
.HP
.BI "int dirfile_madd_polynom(DIRFILE *" dirfile ", const char *" parent ,
.BI "const char *" field_name ", int " poly_ord ", const char *" in_field ,
.BI "const double *" ca );
.HP
.BI "int dirfile_madd_lincom(DIRFILE *" dirfile ", const char *" parent ,
.BI "const char *" field_name ", int " n_fields ", const char **" in_fields ,
.BI "const double *" m ", const double *" b );
.HP
.BI "int dirfile_madd_linterp(DIRFILE *" dirfile ,
.BI "const char *" parent ", const char *" field_name ,
.BI "const char *" in_field ", const char *" table );
.HP
.BI "int dirfile_madd_multiply(DIRFILE *" dirfile ,
.BI "const char *" parent ", const char *" field_name ,
.BI " const char *" in_field1 ", const char *" in_field2 );
.HP
.BI "int dirfile_madd_polynom(DIRFILE *" dirfile ", const char *" parent ,
.BI "const char *" field_name ", int " poly_ord ", const char *" in_field ,
.BI "const double *" a );
.HP
.BI "int dirfile_madd_phase(DIRFILE *" dirfile ,
.BI "const char *" parent ", const char *" field_name ,
.BI "const char *" in_field ", int " phase );
.HP
.BI "int dirfile_madd_sbit(DIRFILE *" dirfile ,
.BI "const char *" parent ", const char *" field_name ,
.BI "const char *" in_field ", int " bitnum ", int " numbits );
.HP
.BI "int dirfile_madd_string(DIRFILE *" dirfile ", const char *" parent ,
.BI "const char *" field_name ", const char *" value );
.hy
.ad n
.SH DESCRIPTION
These functions provide alternatives to using the
.BR dirfile_madd ()
function to add a new metafield of the indicated type under the parent field
given by
.I parent
in the dirfile specified by
.IR dirfile .
.P
In all of these calls,
.I field_name
indicates the name of the field to be added.  It should not be the full
.IB <parent-field> / <meta-field>
field code.  The meaning and valid types of other arguments may be obtained from
the
.BR get_entry (3)
and
.BR dirfile-format (5)
manual pages.

The
.BR dirfile_madd_clincom ()
and
.BR dirfile_madd_cpolynom ()
functions are identical to
.BR dirfile_madd_lincom ()
and
.BR dirfile_madd_polynom (),
except they take complex scalar parameters, instead of purely real values.

The
.BR dirfile_madd_lincom ()
and
.BR dirfile_madd_clincom ()
functions take pointers to three arrays of length
.I n_fields
containing the input field names
.RI ( in_fields ),
the gain factors
.RI ( m " or " cm ),
and the offset terms
.RI ( b " or " cb ).
Similarly,
.BR dirfile_madd_polynom ()
and
.BR dirfile_madd_cpolynom ()
take an array of length
.I poly_ord
+ 1
containing the polynomial co-efficients
.RI ( a " or " ca ).

The
.BR dirfile_madd_string ()
and
.BR dirfile_madd_const ()
functions both add the field and set the value of the field to
.IR value .
For
.BR dirfile_madd_const (),
the
.I const_type
argument specifies the storage type for the const, while
.I data_type
specifies the data type of the value pointed to by
.IR value .

All fields added with this interface must contain numerical parameters.  Fields
with
.B CONST
fields as parameters cannot be added with these functions.  Those fields must
be added with
.BR dirfile_madd (3)
or
.BR dirfile_madd_spec (3).
.SH RETURN VALUE
On success, any of these functions returns zero.   On error, -1 is returned and 
the dirfile error is set to a non-zero error value.  Possible error values are:
.TP 8
.B GD_E_ACCMODE
The specified dirfile was opened read-only.
.TP
.B GD_E_ALLOC
The library was unable to allocate memory.
.TP
.B GD_E_BAD_CODE
The
.IR field_name
argument contained invalid characters. Alternately, the
.I parent
field code was not found, or was already a metafield.
.TP
.B GD_E_BAD_DIRFILE
The supplied dirfile was invalid.
.TP
.B GD_E_BAD_ENTRY
One or more of the field parameters specified was invalid.
.TP
.B GD_E_BAD_TYPE
The
.IR data_type " or " const_type
argument provided to
.BR dirfile_add_const (),
was invalid.
.TP
.B GD_E_DUPLICATE
The
.IR field_name
provided duplicated that of an already existing field.
.TP
.B GD_E_PROTECTED
The metadata of the fragment was protected from change.
.P
The dirfile error may be retrieved by calling
.BR get_error (3).
A descriptive error string for the last error encountered can be obtained from
a call to
.BR get_error_string (3).
.SH SEE ALSO
.BR dirfile_add_bit (3),
.BR dirfile_add_const (3),
.BR dirfile_add_lincom (3),
.BR dirfile_add_linterp (3),
.BR dirfile_add_multiply (3),
.BR dirfile_add_phase (3),
.BR dirfile_add_string (3),
.BR dirfile_madd (3),
.BR dirfile_madd_spec (3),
.BR dirfile_metaflush (3),
.BR dirfile_open (3),
.BR get_error (3),
.BR get_error_string (3),
.BR dirfile-format (5)
