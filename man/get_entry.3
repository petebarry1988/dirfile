.\" get_entry.3.  The get_entry man page.
.\"
.\" (C) 2008 D. V. Wiebe
.\"
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\"
.\" This file is part of the GetData project.
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" GetData is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License along
.\" with GetData; if not, write to the Free Software Foundation, Inc.,
.\" 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
.\"
.TH get_entry 3 "7 October 2008" "Version 0.4.0" "GETDATA"
.SH NAME
get_entry \(em retrieve a dirfile field's metadata
.SH SYNOPSIS
.B #include <getdata.h>
.HP
.nh
.ad l
.BI "int get_entry(DIRFILE *" dirfile ", const char *" field_code ,
.BI "gd_entry_t *" entry );
.hy
.ad n
.SH DESCRIPTION
The
.BR get_entry ()
function queries a dirfile(5) database specified by
.I dirfile
and returns the metadata associated with the field specified by
.IR field_code .

The 
.I dirfile
parameter must point to a valid DIRFILE object previously created by a call to
.BR dirfile_open (3).

The entry will be stored in the gd_entry_t struction indicated by the
.I entry
parameter, which must be allocated by the caller.  Members available in this
structure depend on the field type of the field queried.  See below for a
complete description of this data type.

Strings members in 
.BI * entry
filled by this function (variously, depending on field type:
.IR field ", the elements of the " in_fields "[] array, " table ;
see below) will by dynamically allocated by
.BR get_entry ()
and should not point to allocated memory locations before calling this function.
Only strings provided by the gd_entry_t for the particular field type described
will be allocated.  These strings should be deallocated with
.BR free (3)
by the caller once they are no longer needed.  The
.BR dirfile_free_entry_strings (3)
function is provided as a convenience to do this.

.SH RETURN VALUE
Upon successful completion,
.BR get_entry ()
returns zero, and writes the field metadata in the supplied gd_entry_t buffer.
On error,
.BR get_entry ()
returns -1 and sets the dirfile error to a non-zero error value.  Possible
error values are:
.TP 8
.B GD_E_BAD_CODE
The field specified by
.I field_code
was not found in the database.
.TP
.B GD_E_BAD_DIRFILE
The supplied dirfile was invalid.
.P
The dirfile error may be retrieved by calling
.BR get_error (3).
A descriptive error string for the last error encountered can be obtained from
a call to
.BR get_error_string (3).
.SH THE ENTRY TYPE
Members available in the gd_entry_t structure depend on the field type
described.  All gd_entry_t objects are guaranteed to have at least:
.PP
.in +4n
.nf
typedef struct {
  ...

  const char  *field;       /* field code */
  gd_entype_t  field_type;  /* field type */
  int          format_file; /* format file index */

  ...
} gd_entry_t;
.fi
.in
.P
The
.I field
member is the field code of the entry (ie. its string name).  If the call to
.BR get_entry (3)
is successful, this will be identical to the supplied
.I field_code
parameter.
.P
The
.I field_type
member indicates the field type of the entry.  This is an integer type equal
to one of the following symbols:
.IP
.nh
.ad l
.BR GD_RAW_ENTRY ,\~ GD_LINCOM_ENTRY ,\~ GD_LINTERP_ENTRY ,\~
.BR GD_BIT_ENTRY ,\~ GD_MULTIPLY_ENTRY ,\~ GD_PHASE_ENTRY ,\~
.BR GD_CONST_ENTRY ,\~ GD_STRING_ENTRY
.ad n
.hy
.P
The 
.I format_file
member indicates the format file fragment in which this field is defined.  This
is an integer index to the Dirfile's list of parsed format file fragments.  The
name of the file corresponding to
.I format_file
may be obtained by calling
.BR get_format_filename (3).
A value of zero for this field indicates that the field is defined in the
primary format file, the file called
.B format
in the root dirfile directory (see 
.IR dirfile (5)).
.P
Remaining fields in the gd_entry_t structure depend on the value of
.IR field_type .
Callers are advised to check
.I field_type
before attempting to access the remaining members.  Members for different
field types may be stored in the same physical location in core.  Accordingly,
attempting to access a member not declared for the appropriate field type will
have unspecified results.
.SS RAW Members
A gd_entry_t describing a
.B RAW
entry, will also provide:
.PP
.in +4n
.nf
typedef struct {
  ...

  unsigned int  spf;          /* samples per frame on disk */
  gd_type_t     data_type;    /* data type on disk */

  ...
} gd_entry_t;
.fi
.in
.P
The
.I samples_per_frame
member contains the samples per frame of the binary data on disk.
.P
The
.I data_type
member indicates the data type of the binary data on disk.  See
.BR getdata (3)
for a list of valid values that a variable of type
.B gd_type_t
may take.
.SS LINCOM Members
A gd_entry_t describing a
.B LINCOM
entry, will also provide:
.PP
.in +4n
.nf
typedef struct {
  ...

  int         n_fields;                 /* number of input fields */
  const char *in_fields[GD_MAX_LINCOM]; /* input field code(s) */
  double      m[GD_MAX_LINCOM];         /* scale factor(s) */
  double      b[GD_MAX_LINCOM];         /* offset terms(s) */

  ...
} gd_entry_t;
.fi
.in
.P
The
.I count
member indicates the number of input fields.  It will be between one and
.BR GD_MAX_LINCOM ,
which is defined in getdata.h to the maximum number of input fields permitted
by a
.BR LINCOM .
.P
The
.I in_fields
member is an array of length
.B GD_MAX_LINCOM
containing the input field code(s).  Only the first
.I count
records from this array are initialised.  The remaining records will contain
invalid data.
.P
The
.I m
and
.I b
members are arrays of the scale factor(s) and offset term(s) for the
.BR LINCOM .
Attempting to access more than the first
.I count
records from these array may result in undefined behaviour.
.SS LINTERP Members
A gd_entry_t describing a
.B LINTERP
entry, will also provide:
.PP
.in +4n
.nf
typedef struct {
  ...

  const char *table             /* linterp table filename */
  const char *in_fields[1];     /* input field code */

  ...
} gd_entry_t;
.fi
.in
.P
The
.I table
member is the pathname to the look up table on disk.
.P
The
.I in_fields
member is an array of length 1 containing the input field code.
.SS BIT Members
A gd_entry_t describing a
.B BIT
entry, will also provide:
.PP
.in +4n
.nf
typedef struct {
  ...

  const char *in_fields[1];     /* input field code */
  int         bitnum;           /* first bit */
  int         numbits;          /* bit length */

  ...
} gd_entry_t;
.fi
.in
.P
The
.I in_fields
member is an array of length 1 containing the input field code.
.P
The
.I bitnum
member indicates the number of the first bit (counted from zero) extracted from
the input.
.P
The
.I numbits
member indicates the number of bits which are extracted from the input.
.SS MULTIPLY Members
A gd_entry_t describing a
.B MULTIPLY
entry, will also provide:
.PP
.in +4n
.nf
typedef struct {
  ...

  const char *in_fields[2];     /* input field codes */

  ...
} gd_entry_t;
.fi
.in
.P
The
.I in_fields
member is an array of length 2 containing the input field codes.
.SS PHASE Members
A gd_entry_t describing a
.B PHASE
entry, will also provide:
.PP
.in +4n
.nf
typedef struct {
  ...

  const char *in_fields[1];     /* input field code */
  int         shift;            /* phase shift */

  ...
} gd_entry_t;
.fi
.in
.P
The
.I in_fields
member is an array of length 1 containing the input field code.
.P
The
.I shift
member indicates the shift in samples.  A positive value indicates a shift
forward in time (towards larger frame numbers).
.SH SEE ALSO
.BR dirfile (5),
.BR dirfile_free_entry_strings (3),
.BR dirfile_open (3),
.BR getdata (3),
.BR get_error (3),
.BR get_error_string (3),
.BR get_field_list (3),
.BR get_format_filename (3)
