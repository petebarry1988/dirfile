.\" gd_add_bit.3.  The gd_add_bit man page.
.\"
.\" Copyright (C) 2008, 2009, 2010 D. V. Wiebe
.\"
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\"
.\" This file is part of the GetData project.
.\"
.\" Permission is granted to copy, distribute and/or modify this document
.\" under the terms of the GNU Free Documentation License, Version 1.2 or
.\" any later version published by the Free Software Foundation; with no
.\" Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
.\" Texts.  A copy of the license is included in the `COPYING.DOC' file
.\" as part of this distribution.
.\"
.TH gd_add_bit 3 "3 November 2010" "Version 0.7.0" "GETDATA"
.SH NAME
gd_add_bit, gd_add_carray gd_add_clincom, gd_add_const, gd_add_cpolynom,
gd_add_crecip, gd_add_divide, gd_add_lincom, gd_add_linterp, gd_add_multiply,
gd_add_phase, gd_add_polynom, gd_add_raw, gd_add_recip, gd_add_sbit,
gd_add_string
\(em add a field to a dirfile
.SH SYNOPSIS
.B #include <getdata.h>
.HP
.nh
.ad l
.BI "int gd_add_bit(DIRFILE *" dirfile ", const char *" field_name ,
.BI "const char *" in_field ", gd_bit_t " bitnum ", gd_bit_t " numbits ,
.BI "int " fragment_index );
.HP
.BI "int gd_add_carray(DIRFILE *" dirfile ", const char *" field_name ,
.BI "gd_type_t " const_type ", size_t " array_len ", gd_type_t " data_type ,
.BI "void *" value ", int " fragment_index );
.HP
.BI "int gd_add_clincom(DIRFILE *" dirfile ", const char *" field_name ,
.BI "int " n_fields ", const char **" in_fields ", const double complex *" cm ,
.BI "const double complex *" cb ", int " fragment_index );
.HP
.BI "int gd_add_const(DIRFILE *" dirfile ", const char *" field_name ,
.BI "gd_type_t " const_type ", gd_type_t " data_type ", void *" value ,
.BI "int " fragment_index );
.HP
.BI "int gd_add_cpolynom(DIRFILE *" dirfile ", const char *" field_name ,
.BI "int " poly_ord ", const char *" in_fields ", const double complex *" ca ,
.BI int " fragment_index );
.HP
.BI "int gd_add_crecip(DIRFILE *" dirfile ", const char *" field_name ,
.BI "const char *" in_field ", double complex " cdividend ,
.BI "int " fragment_index );
.HP
.BI "int gd_add_divide(DIRFILE *" dirfile ", const char *" field_name ,
.BI "const char *" in_field1 ", const char *" in_field2 ,
.BI "int " fragment_index );
.HP
.BI "int gd_add_lincom(DIRFILE *" dirfile ", const char *" field_name ,
.BI "int " n_fields ", const char **" in_fields ", const double *" m ,
.BI "const double *" b ", int " fragment_index );
.HP
.BI "int gd_add_linterp(DIRFILE *" dirfile ", const char *" field_name ,
.BI "const char *" in_field ", const char *" table ", int " fragment_index );
.HP
.BI "int gd_add_multiply(DIRFILE *" dirfile ", const char *" field_name ,
.BI "const char *" in_field1 ", const char *" in_field2 ,
.BI "int " fragment_index );
.HP
.BI "int gd_add_phase(DIRFILE *" dirfile ", const char *" field_name ,
.BI "const char *" in_field ", gd_shift_t " shift ", int " fragment_index );
.HP
.BI "int gd_add_polynom(DIRFILE *" dirfile ", const char *" field_name ,
.BI "int " poly_ord ", const char *" in_fields ", const double *" a ,
.BI int " fragment_index );
.HP
.BI "int gd_add_raw(DIRFILE *" dirfile ", const char *" field_name ,
.BI "gd_type_t " data_type ", gd_spf_t " spf ", int " fragment_index );
.HP
.BI "int gd_add_recip(DIRFILE *" dirfile ", const char *" field_name ,
.BI "const char *" in_field ", double " dividend ", int " fragment_index );
.HP
.BI "int gd_add_sbit(DIRFILE *" dirfile ", const char *" field_name ,
.BI "const char *" in_field ", gd_bit_t " bitnum ", gd_bit_t " numbits ,
.BI "int " fragment_index );
.HP
.BI "int gd_add_string(DIRFILE *" dirfile ", const char *" field_name ,
.BI "const char *" value ", int " fragment_index );
.hy
.ad n
.SH DESCRIPTION
These functions provide alternatives to using the
.BR gd_add (3)
or
.BR gd_add_spec (3)
functions to add a new field of the indicated type to the dirfile specified by
.IR dirfile .
.PP
In all of these calls,
.I field_name
indicates the name of the field to be added.  Further,
.I fragment_index
is the index of the format specification fragment into which the field should be
added.  (To convert a fragment index to its file name, see
.BR gd_fragmentname (3).)
The meaning and valid types of other arguments may be obtained from the
.BR gd_entry (3)
and
.BR dirfile-format (5)
manual pages.

The
.BR gd_add_clincom ()
and
.BR gd_add_cpolynom ()
functions are identical to
.BR gd_add_lincom ()
and
.BR gd_add_polynom (),
except they take complex scalar parameters, instead of purely real values.

The
.BR gd_add_lincom ()
and
.BR gd_add_clincom ()
functions takes pointers to three arrays of length
.I n_fields
containing the input field names
.RI ( in_fields ),
the gain factors
.RI ( m " or " cm ),
and the offset terms
.RI ( b " or " cb ).
Similarly,
.BR gd_add_polynom ()
and
.BR gd_add_cpolynom ()
take an array of length
.I poly_ord
+ 1
containing the polynomial co-efficients
.RI ( a " or " ca ).

The
.BR gd_add_string (),\~ gd_add_carry (),
and
.BR gd_add_const ()
functions add the field and set the value of the field to
.IR value .
For
.BR gd_add_const ()
and 
.BR gd_add_carray (),
the
.I const_type
argument specifies the storage type for the const, while
.I data_type
specifies the data type of the value pointed to by
.IR value .

The
.B gd_bit_t
type is a signed 16-bit integer type.  The
.B gd_shift_t
type is a signed 64-bit integer type.  The
.B gd_spf_t
type is an unsigned 16-bit integer type.

All fields added with this interface must contain literal parameters.  Fields
with scalar fields as parameters cannot be added with these functions.  Those
fields must be added with
.BR gd_add (3)
or
.BR gd_add_spec (3).

See
.B NOTES
below for information on using
.BR gd_add_clincom (),\~ gd_add_carray (),
and 
.BR gd_add_cpolynom ()
in the C89 GetData API.

.SH RETURN VALUE
On success, any of these functions returns zero.   On error, -1 is returned and 
the dirfile error is set to a non-zero error value.  Possible error values are:
.TP 8
.B GD_E_ACCMODE
The specified dirfile was opened read-only.
.TP
.B GD_E_ALLOC
The library was unable to allocate memory.
.TP
.B GD_E_BAD_CODE
The
.IR field_name
argument contained invalid characters.
.TP
.B GD_E_BAD_DIRFILE
The supplied dirfile was invalid.
.TP
.B GD_E_BAD_ENTRY
One or more of the field parameters specified was invalid.
.TP
.B GD_E_BAD_INDEX
The
.IR fragment_index
argument was out of range.
.TP
.B GD_E_BAD_TYPE
The
.IR data_type " or " const_type
argument provided to
.BR gd_add_raw "()  or " gd_add_const (),
was invalid.
.TP
.B GD_E_BOUNDS
The
.I array_len
parameter provided to
.BR gd_add_carray ()
was greater than GD_MAX_CARRAY_LENGTH.
.TP
.B GD_E_DUPLICATE
The
.IR field_name
provided duplicated that of an already existing field.
.TP
.B GD_E_INTERNAL_ERROR
An internal error occurred in the library while trying to perform the task.
This indicates a bug in the library.  Please report the incident to the
GetData developers.
.TP
.B GD_E_PROTECTED
The metadata of the fragment was protected from change.  Or, the creation of a
.B RAW
field was attempted and the data of the fragment was protected.
.TP
.B GD_E_RAW_IO
An I/O error occurred while creating an empty binary file to be associated with
a newly added
.B RAW
field.
.TP
.B GD_E_UNKNOWN_ENCODING
The encoding scheme of the indicated format specification fragment is not known
to the library.  As a result, the library was unable to create an empty binary
file to be associated with a newly added
.B RAW
field.
.TP
.B GD_E_UNSUPPORTED
The encoding scheme of the indicated format specification fragment does not
support creating an empty binary file to be associated with a newly added
.B RAW
field.
.PP
The dirfile error may be retrieved by calling
.BR gd_error (3).
A descriptive error string for the last error encountered can be obtained from
a call to
.BR gd_error_string (3).

.SH NOTES
GetData artifically limits the number of elements in a
.B CARRAY
to the value of the symbol GD_MAX_CARRAY_LENGTH defined in getdata.h.  This is
done to be certain that the
.B CARRAY
won't overrun the line when flushed to disk.  On a 32-bit system, this number
is 2**24.  It is larger on a 64-bit system.

The C89 GetData API provides different prototypes for
.BR gd_add_clincom (),\~ gd_add_cpolynom (),
and
.BR gd_add_crecip ():
.PP
.nf
.B #define GD_C89_API
.B #include <getdata.h>
.HP
.nh
.ad l
.BI "int gd_add_clincom(DIRFILE *" dirfile ", const char *" field_name ,
.BI "int " n_fields ", const char **" in_fields ", const double *" cm ,
.BI "const double *" cb ", int " fragment_index );
.HP
.BI "int gd_add_cpolynom(DIRFILE *" dirfile ", const char *" field_name ,
.BI "int " poly_ord ", const char *" in_fields ", const double *" ca ,
.BI int " fragment_index );
.HP
.BI "int gd_add_crecip(DIRFILE *" dirfile ", const char *" field_name ,
.BI "const char *" in_field ", double " cdividend [2],
.BI "int " fragment_index );
.hy
.ad n
.fi
.PP
In this case, the array pointers passed as
.IR cm ,\~ cb
or
.IR ca
should have twice as many (purely real) elements, consisting of alternating
real and imaginary parts for the complex data.  For example,
.IR ca [0]
should be the real part of the first co-efficient,
.IR ca [1]
the imaginary part of the first co-efficient,
.IR ca [2]
the real part of the second co-efficient,
.IR ca [3]
the imaginary part of the second co-efficient, and so on.  Similarly, the
.I cdividend
parameter becomes a double precision array of length two.

.SH SEE ALSO
.BR gd_add (3),
.BR gd_add_spec (3),
.BR gd_error (3),
.BR gd_error_string (3),
.BR gd_madd_bit (3),
.BR gd_madd_carray (3),
.BR gd_madd_const (3),
.BR gd_madd_divide (3),
.BR gd_madd_lincom (3),
.BR gd_madd_linterp (3),
.BR gd_madd_multiply (3),
.BR gd_madd_phase (3),
.BR gd_madd_polynom (3),
.BR gd_madd_recip (3),
.BR gd_madd_sbit (3),
.BR gd_madd_string (3),
.BR gd_metaflush (3),
.BR gd_open (3),
.BR dirfile-format (5)
