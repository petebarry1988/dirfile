.\" dirfile_add_bit.3.  The dirfile_add_bit man page.
.\"
.\" (C) 2008 D. V. Wiebe
.\"
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\"
.\" This file is part of the GetData project.
.\"
.\" Permission is granted to copy, distribute and/or modify this document
.\" under the terms of the GNU Free Documentation License, Version 1.2 or
.\" any later version published by the Free Software Foundation; with no
.\" Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
.\" Texts.  A copy of the license is included in the `COPYING.DOC' file
.\" as part of this distribution.
.\"
.TH dirfile_add_bit 3 "8 December 2008" "Version 0.5.0" "GETDATA"
.SH NAME
dirfile_add_bit, dirfile_add_const, dirfile_add_lincom, dirfile_add_linterp,
dirfile_add_multiply, dirfile_add_phase, dirfile_add_raw, dirfile_add_string
\(em add a field to a dirfile
.SH SYNOPSIS
.B #include <getdata.h>
.HP
.nh
.ad l
.BI "int dirfile_add_bit(DIRFILE *" dirfile ", const char *" field_name ,
.BI "const char *" in_field ", int " bitnum ", int " numbits ,
.BI "int " fragment_index );
.HP
.BI "int dirfile_add_const(DIRFILE *" dirfile ", const char *" field_name ,
.BI "gd_type_t " const_type ", gd_type_t " data_type ", void *" value ,
.BI "int " fragment_index );
.HP
.BI "int dirfile_add_lincom(DIRFILE *" dirfile ", const char *" field_name ,
.BI "int " n_fields ", const char **" in_fields ", const double *" m ,
.BI "const double *" b ", int " fragment_index );
.HP
.BI "int dirfile_add_linterp(DIRFILE *" dirfile ", const char *" field_name ,
.BI "const char *" in_field ", const char *" table ", int " fragment_index );
.HP
.BI "int dirfile_add_multiply(DIRFILE *" dirfile ", const char *" field_name ,
.BI "const char *" in_field1 ", const char *" in_field2 ,
.BI "int " fragment_index );
.HP
.BI "int dirfile_add_phase(DIRFILE *" dirfile ", const char *" field_name ,
.BI "const char *" in_field ", int " phase ", int " fragment_index );
.HP
.BI "int dirfile_add_raw(DIRFILE *" dirfile ", const char *" field_name ,
.BI "gd_type_t " data_type ", unsigned int " spf ", int " fragment_index );
.HP
.BI "int dirfile_add_string(DIRFILE *" dirfile ", const char *" field_name ,
.BI "const char *" value ", int " fragment_index );
.hy
.ad n
.SH DESCRIPTION
These functions provide alternatives to using the
.BR dirfile_add (3)
function to add a new field of the indicated type to the dirfile specified by
.IR dirfile .
.P
In all of these calls,
.I field_name
indicates the name of the field to be added.  Further,
.I fragment_index
is the index of the format file fragment into which the field should be added.
(To convert a fragment index to its file name, see
.BR get_fragmentname (3).)
The meaning and valid types of other arguments may be obtained from the
.BR get_entry (3)
and
.BR dirfile-format (5)
manual pages.
.P
The
.BR dirfile_add_lincom ()
function takes pointers to three arrays of length
.I n_fields
containing the input field names
.RI ( in_fields ),
the gain factors
.RI ( m ),
and the offset terms
.RI ( b ).
.P
The
.BR dirfile_add_string ()
and
.BR dirfile_add_const ()
functions both add the field and set the value of the field to
.IR value .
For
.BR dirfile_add_const (),
the
.I const_type
argument specifies the storage type for the const, while
.I data_type
specifies the data type of the value pointed to by
.IR value .

All fields added with this interface must contain numerical parameters.  Fields
with
.B CONST
fields as parameters cannot be added with these functions.  Those fields must
be added with
.BR dirfile_add_spec (3).
.SH RETURN VALUE
On success, any of these functions returns zero.   On error, -1 is returned and 
the dirfile error is set to a non-zero error value.  Possible error values are:
.TP 8
.B GD_E_ACCMODE
The specified dirfile was opened read-only.
.TP
.B GD_E_ALLOC
The library was unable to allocate memory.
.TP
.B GD_E_BAD_CODE
The
.IR field_name
argument contained invalid characters.
.TP
.B GD_E_BAD_DIRFILE
The supplied dirfile was invalid.
.TP
.B GD_E_BAD_ENTRY
One or more of the field parameters specified was invalid.
.TP
.B GD_E_BAD_INDEX
The
.IR fragment_index
argument was out of range.
.TP
.B GD_E_BAD_TYPE
The
.IR data_type " or " const_type
argument provided to
.BR dirfile_add_raw "()  or " dirfile_add_const (),
was invalid.
.TP
.B GD_E_DUPLICATE
The
.IR field_name
provided duplicated that of an already existing field.
.TP
.B GD_E_PROTECTED
The metadata of the fragment was protected from change.  Or, the creation of a
.B RAW
field was attempted and the data of the fragment was protected.
.TP
.B GD_E_RAW_IO
An I/O error occurred while creating an empty binary file to be associated with
a newly added
.B RAW
field.
.TP
.B GD_E_UNKNOWN_ENCODING
The encoding scheme of the specified format file fragment is not known to the
library.  As a result, the library was unable to create an empty binary file to
be associated with a newly added
.B RAW
field.
.TP
.B GD_E_UNSUPPORTED
The encoding scheme of the specified format file fragment does not support
creating an empty binary file to be associated with a newly added
.B RAW
field.
.P
The dirfile error may be retrieved by calling
.BR get_error (3).
A descriptive error string for the last error encountered can be obtained from
a call to
.BR get_error_string (3).
.SH SEE ALSO
.BR dirfile_add (3),
.BR dirfile_add_spec (3),
.BR dirfile_madd_bit (3),
.BR dirfile_madd_const (3),
.BR dirfile_madd_lincom (3),
.BR dirfile_madd_linterp (3),
.BR dirfile_madd_multiply (3),
.BR dirfile_madd_phase (3),
.BR dirfile_madd_string (3),
.BR dirfile_metaflush (3),
.BR dirfile_open (3),
.BR get_error (3),
.BR get_error_string (3),
.BR dirfile-format (5)
