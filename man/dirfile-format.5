.\" dirfile-format.5.  The dirfile format file man page.
.\"
.\" (C) 2005, 2006, 2008 D. V. Wiebe
.\"
.\""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
.\"
.\" This file is part of the GetData project.
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" GetData is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License along
.\" with GetData; if not, write to the Free Software Foundation, Inc.,
.\" 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
.\"
.TH dirfile\-format 5 "3 October 2008" "Standards Version 6" "DATA FORMATS"
.SH NAME
dirfile\-format \(em the dirfile database format specification file
.SH DESCRIPTION
The
.I dirfile format
file fully specifies the raw and derived time streams and auxiliary information
for a
.BR dirfile (5)
database.

The format file is a case sensitive ASCII or UTF-8 text file called
.B format
located in the dirfile directory.

.SH SYNTAX
The format file is composed of field specification lines and directive lines,
optionally separated by blank lines or lines containing only whitespace.
Unless escaped (see below), the hash mark
.RB ( # )
is the comment delimiter; the comment delimiter, and any text following it to
the end of the line, is ignored.

.SS Tokens
Both field specification lines and directive lines consist of several tokens
separated by whitespace.  The first token of a directive line is always a
.IR "reserved word" .
The first token of a field specification line is never a reserved word.

Since tokens are separated by whitespace, to include a whitespace character in
a token, it must either be escaped by preceeding it by a backslash character
.RB ( \e )
or else by enclosing the token in quotation marks
.RB ( """" ).
The quotation marks themselves will be stripped from the token.  To include a
literal quotation mark or backslash character in a token, it must be escaped
.RB ( \e" " or " \e\e ).
Similarly, a hash mark may be included in a token by including it in a quoted
token or else by escaping it
.RB ( \e# ),
otherwise the hash mark will be understood as the comment delimiter.

It is a syntax error to have a line which contains unmatched quotation marks, or
in which the last character is the backslash character.

Several characters when escaped by a preceeding backslash character are
interpreted as special characters in tokens.  Some of these have already been
mentioned.  They are:
.RS
.TP
.B \e"
a quotation mark character (ASCII 0x22 / U+0022)
.TP
.B \e#
a hash mark character (ASCII 0x23 / U+0023)
.TP
.B \ea
an alert (bell) character (ASCII 0x07 / U+0007)
.TP
.B \eb
a backspace character (ASCII 0x08 / U+0008)
.TP
.B \ee
an escape character (ASCII 0x1B / U+001B)
.TP
.B \ef
a form-feed character (ASCII 0x0C / U+000C)
.TP
.B \en
a line-feed character (ASCII 0x0A / U+000A)
.TP
.B \er
a carraige return character (ASCII 0x0D / U+000D)
.TP
.B \et
a horitontal tab character (ASCII 0x09 / U+0009)
.TP
.B \ev
a vertical tab character (ASCII 0x0B / U+000B)
.TP
.B \e\e
a backslash character (ASCII 0x5C / U+005C)
.TP
.BI \e ooo
the single byte given by the octal number
.IR ooo .
.TP
.BI \ex hh
the single byte given by the hexidecimal number
.IR hh .
.TP
.BI \eu hhhhhhh
the UTF-8 byte sequence encoding the Unicode code point given by the hexidecimal
number
.IR hhhhhhh .
.RE

Any other character which is escaped is interpreted as the character itself.
.RI ( i.e.
.B \ec
is interpreted as
.BR c ).

No token may contain the NULL character (ASCII 0x00 / U+0000).  Furthermore,
although support is present to create UTF-8 byte sequences, tokens are not
required to be valid UTF-8 sequences.  Any byte sequence not containing the NULL
character forms a valid token.  However, there may be further restrictions on
allowed characters for a token in a particular situation, (for example, when
used as a field name).

.SS Reserved Words

There are six 
.IR "reserved words" ,
which cannot be used as field names in the dirfile.  Instead, these specify
directives.  Any reserved word may omit its initial forward slash
.RB ( / ),
without change in meaning.  Future versions of the Standards may require the
slash to distinguish a reserved word from a field name.
.TP
.B /ENCODING
The ENCODING directive specifies the encoding scheme used to encode the dirfile.
The encoding scheme may be one of the pre-defined names listed below, which are
described in more detail in
.BR dirfile-encoding (5),
or any other site-specific encoding scheme.  The pre-defined scheme names are:
.RS
.TP
.I none
The dirfile is unencoded.
.TP
.I slim
The dirfile is compressed using the slimlib library.
.TP
.I text
The dirfile is text encoded.
.PP
Implementations should fail gracefully when encountering an unknown encoding
scheme.  If no encoding scheme is specified, behaviour is implementaiton
dependent.  Syntax is:
.IP
.BI /ENCODING\~ <scheme>
.RE
.TP
.B /ENDIAN
The ENDIAN directive specifies the endianness of the raw data in the database.
In previous versions of the Dirfile Standard, raw data was always assumed to be
little-endian.  This assumption has been removed.  The assumed endianness of raw
data in dirfiles which omit this directive is implementation dependent.  Syntax
is:
.RS
.IP
.B /ENDIAN
.IR "( " big " | " little " )"
.RE
.TP
.B /FRAMEOFFSET
The FRAMEOFFSET directive specifies the frame number of the first frame in the
database.  Syntax is:
.RS
.IP
.BI /FRAMEOFFSET\~ <integer>
.RE
.TP
.B /INCLUDE
The INCLUDE directive specifies another file to parse for additional format
specification for the dirfile.  The inclusion is treated as if the lines of the
included file were pasted verbatim in place of the INCLUDE directive line.  The
exception to this is that raw fields specified in the included file will be
looked for in the directory containing the included file and not in the
directory containing the parent format file.  The included file may be
specified either with an absolute path, or else a relative path from the
current file.  Syntax is:
.RS
.IP
.BI /INCLUDE\~ <file>
.RE
.TP
.B /META
The META directive specifies a metadata field attached to a particular parent
field.  This directive is used to attach field metadata to the parent.  The
field metadata may be of any allowed type.  Metadata field data are retrieved in
exactly the same way as regular field data, but the field code specified will
consist of the parent and metadata field names joined with a forward slash:
.RS
.IP
.IB <parent-field> / <meta-field>
.PP
META fields of type RAW are prohibited.  Furthermore, META fields may not be
specified before their parent field is.  Syntax is:
.IP
.B /META
.I <parent-field>
{field specification line}
.PP
As an illustration of this concept,
.IP
.B /META 
pfield meta
.B CONST FLOAT64
3.291882
.PP
provides a scalar metadatum called
.I meta
with value 3.291882 attached to the field
.IR pfield .
This particular metadata field may be referred to by the field code
"pfield/meta".  Note that multiple parent fields may have metadata fields with
the same name, since all references to metadata fields must include the parent
field name.  Metadata fields may not themselves have further sub-metadata.
.RE
.TP
.B /VERSION
The VERSION directive specifies the particular version of the Dirfile Standards
to which the dirfile format file conforms.  This directive should occur before
any version dependent syntax is encountered.  As of Standards Version 5, no such
syntax exists, and this directive is provided primarily to ease forward
compatibility.  Syntax is:
.RS
.IP
.BI /VERSION\~ <integer>
.RE
.PP
Like the rest of the format file, these reserved words are case sensitive.
Except for the INCLUDE directive, each instance of which must be processed
independently, if multiple instances of a directive are present in a dirfile
format file, only the last such instance will be honoured.

.SS Field Specification Lines

Any line which does not start with a
.I reserved word
is assumed to be a field specification line.  The first token in a field
specification line is the field name.  The field name consists of one or more
characters, excluding both ASCII control characters, and the characters
.IP
.B &\t/\t;\t<\t>\t\\\\\t|\t.
.PP
which are reserved.  The field name may not be
.B INDEX
nor
.BR FILEFRAM ,
which are synonyms for a special, implicit field which contains the integer
frame index.  Field names are case sensitive.  The second token in the field
specification line is the field type.  The meaning of subsequent tokens depends
on the field type.

There are five field types:
.TP
.B BIT
The BIT field type extracts one or more bits out of an input field.  Syntax is:
.RS
.IP
.I <field-name>
.B BIT
.I <input> <first-bit> [<bits>]
.PP
which specifies
.I field-name
to be the value of bits
.I first-bit
through
.IR first-bit + bits -1
of the input field
.IR input ,
when
.I input
is converted from its native type to an (endianness corrected) unsigned 64-bit
integer.  If
.I bits
is omitted, it is assumed to be 1.
.RE
.TP
.B CONST
The CONST field type is a scalar constant fully specified in the format file
metadata.  Syntax is:
.RS
.IP
.I <field-name>
.B CONST
.I <type> <value>
.PP
where
.I type
may be any supported native data type (see the description of the
.B RAW
field type below), and
.I value
is the numerical value of the constant interpreted as indicated by
.IR type .
Unlike most other field types,
.B CONST
is a scalar type with the constant value specified.
.RE
.TP
.B LINCOM
The LINCOM field type is the linear combination of one, two or three input
fields.  Syntax is:
.RS
.IP
.I <field-name>
.B LINCOM
.IR "<n> <field1> <a1> <b1>"\~ [ "<field2> <a2> <b2>"\~ [ "<field3> <a3> <b3>" ]]
.PP
where
.I n
indicates the number of input fields (1, 2, or 3).  The derived field will be
computed as:
.IP
field-name[n] = (a1 * field1[n] + b1) + (a2 * field2[n2] + b2) + (a3 * field3[n3] + b3)
.PP
with the
.I field2
and
.I field3
terms included only if specified and the indices
.I n2
and
.I n3
computed appropriately for the (potentially differing) sample rates of the
input fields.  The resultant field will have the same sample rate as
.IR field1 .
.RE
.TP
.B LINTERP
The LINTERP field type specifies a table look up based on another dirfile field.
Syntax is:
.RS
.IP
.I <field-name>
.B LINTERP
.I <input> <table>
.PP
where
.I input
is the input field for the table lookup and
.I table
is the complete path to the lookup table file for the field.  The lookup table
file is an ASCII text file with two whitespace separated columns of
.I x
and
.I y
values.  Values are linearly interpolated between the points specified in the
lookup table.
.RE
.TP
.B MULTIPLY
The MULTIPLY field type is the product of two fields.  Syntax is:
.RS
.IP
.I <field-name>
.B MULTIPLY
.I <field1> <field2>
.PP
The derived field will be computed as:
.IP
field-name[n] = field1[n] * field2[n2]
.PP
with the index
.I n2
computed appropriately for the (potentially differing) sample rates of the
input fields.  The resultant field will have the same sample rate as
.IR field1 .
.RE
.TP
.B PHASE
The PHASE field type shifts an input field by a specified number of samples.  Syntax is:
.RS
.IP
.I <field-name>
.B PHASE
.I <input> <shift>
.PP
which specifies
.I field-name
to be the input field,
.IR input ,
shifted by
.I shift
samples.  A positive
.I shift
indicates a shift forward in time.  Results of shifting past the beginning- or end-of-file is
implementation dependent.
.RE
.TP
.B RAW
The RAW field type specifies raw time streams on disk.  In this case, the field
name should correspond to the name of the file containing the time stream.
Syntax is:
.RS
.IP
.I <field-name>
.B RAW
.I <type> <sample-rate>
.PP
where
.I sample-rate
is the number of samples per dirfile frame for the time stream and
.I type
is a token specifying the native data format type:
.RS
.TP
.I UINT8
unsigned 8-bit integer
.TP
.I INT8
signed 8-bit integer
.TP
.I UINT16
unsigned 16-bit integer
.TP
.I INT16
signed 16-bit integer
.TP
.I UINT32
unsigned 32-bit integer
.TP
.I INT32
signed 32-bit integer
.TP
.I UINT64
unsigned 64-bit integer
.TP
.I INT64
signed 64-bit integer
.TP
.IR FLOAT32 \~or\~ FLOAT
IEEE-754 standard 32-bit single precision floating point number
.TP
.IR FLOAT64 \~or\~ DOUBLE
IEEE-754 standard 64-bit double precision floating point number
.RE

For backwards compatibility, implementations should also recognise the following
single character type aliases in use prior to Standards Version 5:
.RS
.TP
.I c
UINT8
.TP
.I u
UINT16
.TP
.I s
INT16
.TP
.I U
UINT32
.TP
.IR i ,\~ S
INT32
.TP
.IR f
FLOAT32
.TP
.IR d
FLOAT64
.RE

Types
.IR INT8 ,\~ UINT64 ,
and
.I INT64
are not supported before Standards Version 5, so no character aliases exist for
these types.
.RE
.TP
.B STRING
The STRING field type is a scalar string fully specified in the format file
metadata.  Syntax is:
.RS
.IP
.I <field-name>
.B STRING
.I <value>
.PP
where
.I value
is the string value of the field.  Note that
.I value
is a single token.  To include whitespace in the string, enclose
.I value
in quotation marks
.RB ( """" ),
or else escape the whitespace with the backslash character
.RB ( \e ).
Unlike most other field types,
.B STRING
is a scalar type with the constant string value specified.
.RE

.SH STANDARDS VERSIONS

This document describes Version 6 of the Dirfile Standards.

Version 6 of the Standards (October 2008) added
.B /ENCODING
and
.BR /META ,
and the
.B CONST
and
.B STRING
field types.  It also permitted whitespace in tokens and introduced the
character escape sequences.

Version 5 of the Standards (August 2008) added
.B VERSION
and
.BR ENDIAN ,
slash demarcation of reserved words, and removed the restriction on field
name length.  It also introduced the data types
.IR INT8 ,\~ INT64 ,
and
.IR UINT64 ,
the new-style type specifiers, and increased the range of the
.B BIT
field type from 32 to 64 bits.

Version 4 of the Standards (October 2006) added the
.B PHASE
field type.

Version 3 of the Standards (January 2006) added
.B INCLUDE 
and increased the allowed length of a field name from 16 to 50 characters.

Version 2 of the Standards (September 2005) added the
.B MULTIPLY
field type.

Version 1 of the Standards (November 2004) added
.B FRAMEOFFSET
and the optional fourth argument to the
.B BIT
field type.

Version 0 of the Standards (before March 2003) refers to the dirfile standards
supported by the
.BR getdata (3)
library originally introduced into the
.BR kst (1)
sources, which contained support for all other features covered by this
document.

.SH AUTHORS

The dirfile specification was developed by C. B. Netterfield
.nh
<netterfield@astro.utoronto.ca>
.hy 1

Since Standards Version 3, the dirfile specification has been maintained by
D. V. Wiebe
.nh
<dwiebe@physics.utoronto.ca>
.hy 1

.SH SEE ALSO
.BR dirfile (5),
.BR dirfile-encoding (5)
